{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const planService = {\n  // Generate a new workout and diet plan\n  generatePlan: async planData => {\n    try {\n      const response = await api.post('/generate-plan', planData);\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to generate plan');\n    }\n  },\n  // Get all plans with pagination\n  getAllPlans: async (page = 1, limit = 10) => {\n    try {\n      const response = await api.get(`/plans?page=${page}&limit=${limit}`);\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Failed to fetch plans');\n    }\n  },\n  // Get a specific plan by ID\n  getPlanById: async planId => {\n    try {\n      const response = await api.get(`/plans/${planId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Failed to fetch plan');\n    }\n  },\n  // Health check\n  healthCheck: async () => {\n    try {\n      const response = await api.get('/health');\n      return response.data;\n    } catch (error) {\n      throw new Error('Backend service is not available');\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","planService","generatePlan","planData","response","post","data","error","_error$response","_error$response$data","Error","getAllPlans","page","limit","get","_error$response2","_error$response2$data","getPlanById","planId","_error$response3","_error$response3$data","healthCheck"],"sources":["/Users/balaashrithareddy/Desktop/dietP/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport const planService = {\n  // Generate a new workout and diet plan\n  generatePlan: async (planData) => {\n    try {\n      const response = await api.post('/generate-plan', planData);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.error || 'Failed to generate plan');\n    }\n  },\n\n  // Get all plans with pagination\n  getAllPlans: async (page = 1, limit = 10) => {\n    try {\n      const response = await api.get(`/plans?page=${page}&limit=${limit}`);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.error || 'Failed to fetch plans');\n    }\n  },\n\n  // Get a specific plan by ID\n  getPlanById: async (planId) => {\n    try {\n      const response = await api.get(`/plans/${planId}`);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.error || 'Failed to fetch plan');\n    }\n  },\n\n  // Health check\n  healthCheck: async () => {\n    try {\n      const response = await api.get('/health');\n      return response.data;\n    } catch (error) {\n      throw new Error('Backend service is not available');\n    }\n  }\n};\n\nexport default api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,uBAAuB;AAE5C,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,WAAW,GAAG;EACzB;EACAC,YAAY,EAAE,MAAOC,QAAQ,IAAK;IAChC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,gBAAgB,EAAEF,QAAQ,CAAC;MAC3D,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAC,eAAA,EAAAC,oBAAA;MACd,MAAM,IAAIC,KAAK,CAAC,EAAAF,eAAA,GAAAD,KAAK,CAACH,QAAQ,cAAAI,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBF,IAAI,cAAAG,oBAAA,uBAApBA,oBAAA,CAAsBF,KAAK,KAAI,yBAAyB,CAAC;IAC3E;EACF,CAAC;EAED;EACAI,WAAW,EAAE,MAAAA,CAAOC,IAAI,GAAG,CAAC,EAAEC,KAAK,GAAG,EAAE,KAAK;IAC3C,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAMP,GAAG,CAACiB,GAAG,CAAC,eAAeF,IAAI,UAAUC,KAAK,EAAE,CAAC;MACpE,OAAOT,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAQ,gBAAA,EAAAC,qBAAA;MACd,MAAM,IAAIN,KAAK,CAAC,EAAAK,gBAAA,GAAAR,KAAK,CAACH,QAAQ,cAAAW,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBT,IAAI,cAAAU,qBAAA,uBAApBA,qBAAA,CAAsBT,KAAK,KAAI,uBAAuB,CAAC;IACzE;EACF,CAAC;EAED;EACAU,WAAW,EAAE,MAAOC,MAAM,IAAK;IAC7B,IAAI;MACF,MAAMd,QAAQ,GAAG,MAAMP,GAAG,CAACiB,GAAG,CAAC,UAAUI,MAAM,EAAE,CAAC;MAClD,OAAOd,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAY,gBAAA,EAAAC,qBAAA;MACd,MAAM,IAAIV,KAAK,CAAC,EAAAS,gBAAA,GAAAZ,KAAK,CAACH,QAAQ,cAAAe,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBb,IAAI,cAAAc,qBAAA,uBAApBA,qBAAA,CAAsBb,KAAK,KAAI,sBAAsB,CAAC;IACxE;EACF,CAAC;EAED;EACAc,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,IAAI;MACF,MAAMjB,QAAQ,GAAG,MAAMP,GAAG,CAACiB,GAAG,CAAC,SAAS,CAAC;MACzC,OAAOV,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAM,IAAIG,KAAK,CAAC,kCAAkC,CAAC;IACrD;EACF;AACF,CAAC;AAED,eAAeb,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}